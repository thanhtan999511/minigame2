<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Đua Vịt</title>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for user icon -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        :root {
            --red-duck: #DC143C;
            --blue-duck: #1E90FF;
            --yellow-duck: #FFD700;
            --purple-duck: #8A2BE2;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f0f4f8, #c1d3e8);
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .container {
            width: 100%;
            max-width: 900px;
            background-color: #fff;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
            border-radius: 20px;
            padding: 2rem;
            text-align: center;
        }

        h1 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
            font-size: 2.5rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        p.description {
            color: #7f8c8d;
            margin-top: 0;
            font-size: 1.1rem;
        }
        
        #user-info {
            font-size: 0.9rem;
            color: #555;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 8px;
            background-color: #ecf0f1;
            border-radius: 10px;
        }

        .message-box {
            background-color: #e8f5e9;
            color: #2e7d32;
            padding: 1rem;
            border-radius: 10px;
            margin: 1.5rem 0;
            font-weight: bold;
            display: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .race-track {
            display: flex;
            flex-direction: column;
            width: 100%;
            position: relative;
            background-color: #b0e0e6;
            border: 5px solid #a4d8e0;
            border-radius: 10px;
            margin: 2rem 0;
            padding: 10px 0;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
        }

        .start-line, .finish-line {
            position: absolute;
            height: 100%;
            top: 0;
            width: 10px;
            background-image: repeating-linear-gradient(
                45deg,
                rgba(255, 255, 255, 0.8) 0,
                rgba(255, 255, 255, 0.8) 5px,
                transparent 5px,
                transparent 10px
            );
        }

        .start-line { left: 0; }
        .finish-line { right: 0; }

        .lane {
            display: flex;
            align-items: center;
            height: 80px;
            position: relative;
            border-bottom: 2px dashed rgba(0, 0, 0, 0.2);
        }

        .lane:last-child { border-bottom: none; }

        /* The "ducks" are now rectangular boxes with text */
        .duck {
            width: 120px;
            height: 50px;
            border-radius: 8px;
            position: absolute;
            left: 0;
            transition: left 0.5s ease-out;
            cursor: pointer;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .duck-red { background-color: var(--red-duck); }
        .duck-blue { background-color: var(--blue-duck); }
        .duck-yellow { background-color: var(--yellow-duck); }
        .duck-purple { background-color: var(--purple-duck); }

        .score {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: bold;
            font-size: 1.2rem;
            color: #DC143C;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            z-index: 5;
        }
        
        .controls {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-top: 2rem;
        }

        .team-control {
            background-color: #f8f9fa;
            border-radius: 15px;
            padding: 1.5rem 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease-in-out;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .team-control:hover {
            transform: translateY(-5px);
        }

        /* The duck buttons are now also rectangular boxes with text */
        .duck-button {
            border: none;
            cursor: pointer;
            padding: 10px 20px;
            transition: transform 0.1s ease-in-out;
            width: 120px;
            height: 50px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .duck-button-red { background-color: var(--red-duck); }
        .duck-button-blue { background-color: var(--blue-duck); }
        .duck-button-yellow { background-color: var(--yellow-duck); }
        .duck-button-purple { background-color: var(--purple-duck); }

        .duck-button:active {
            transform: scale(0.95);
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 1rem;
        }

        .vote-btn {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            font-size: 1.2rem;
            font-weight: bold;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        }
        
        .vote-btn.plus { background-color: #2ecc71; }
        .vote-btn.minus { background-color: #e74c3c; }

        .vote-btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .vote-btn:active {
            transform: translateY(1px);
        }
        
        #start-game-btn {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 1.5rem 3rem;
            font-size: 1.5rem;
            font-weight: bold;
            border-radius: 15px;
            cursor: pointer;
            margin-top: 2rem;
            transition: background-color 0.2s, transform 0.1s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        #start-game-btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        #start-game-btn:active {
            transform: translateY(0);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>MASAN AMAZING BEER</h1>
        <p class="description">Đua đến 5000 điểm để giành chiến thắng!</p>
        <div id="user-info">
            <i class="fas fa-user"></i>
            <span id="user-id-display">Đang đăng nhập...</span>
        </div>
        <div id="game-message" class="message-box"></div>

        <button id="start-game-btn">Bắt đầu Game</button>
        
        <!-- Game content, hidden by default -->
        <div id="game-content" style="display: none;">
            <div class="race-track">
                <div class="start-line"></div>
                <div class="finish-line"></div>
                
                <!-- Red Box -->
                <div class="lane" id="lane-red">
                    <div id="duck-red" class="duck duck-red">Red Ruby</div>
                    <span class="score" id="score-red">0</span>
                </div>
                <!-- Blue Box -->
                <div class="lane" id="lane-blue">
                    <div id="duck-blue" class="duck duck-blue">LUSH</div>
                    <span class="score" id="score-blue">0</span>
                </div>
                <!-- Yellow Box -->
                <div class="lane" id="lane-yellow">
                    <div id="duck-yellow" class="duck duck-yellow">Sư Tử Trắng</div>
                    <span class="score" id="score-yellow">0</span>
                </div>
                <!-- Purple Box -->
                <div class="lane" id="lane-purple">
                    <div id="duck-purple" class="duck duck-purple">Ruby Max</div>
                    <span class="score" id="score-purple">0</span>
                </div>
            </div>

            <div class="controls">
                <!-- Team Red -->
                <div class="team-control">
                    <button id="btn-red" class="duck-button duck-button-red">Red Ruby</button>
                    <div class="button-group">
                        <button class="vote-btn plus" data-team="red" data-action="plus">+1</button>
                        <button class="vote-btn minus" data-team="red" data-action="minus">-1</button>
                    </div>
                </div>
                <!-- Team Blue -->
                <div class="team-control">
                    <button id="btn-blue" class="duck-button duck-button-blue">LUSH</button>
                    <div class="button-group">
                        <button class="vote-btn plus" data-team="blue" data-action="plus">+1</button>
                        <button class="vote-btn minus" data-team="blue" data-action="minus">-1</button>
                    </div>
                </div>
                <!-- Team Yellow -->
                <div class="team-control">
                    <button id="btn-yellow" class="duck-button duck-button-yellow">Sư Tử Trắng</button>
                    <div class="button-group">
                        <button class="vote-btn plus" data-team="yellow" data-action="plus">+1</button>
                        <button class="vote-btn minus" data-team="yellow" data-action="minus">-1</button>
                    </div>
                </div>
                <!-- Team Purple -->
                <div class="team-control">
                    <button id="btn-purple" class="duck-button duck-button-purple">Ruby Max</button>
                    <div class="button-group">
                        <button class="vote-btn plus" data-team="purple" data-action="plus">+1</button>
                        <button class="vote-btn minus" data-team="purple" data-action="minus">-1</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        // Import Firestore functions needed for the new data model
        import { getFirestore, collection, onSnapshot, addDoc, getDocs, deleteDoc, doc, query, setDoc, writeBatch } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment for Firebase
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Game constants
        const WINNING_SCORE = 5000; 
        const teams = ['red', 'blue', 'yellow', 'purple'];

        let app;
        let db;
        let auth;
        let isAuthReady = false;
        let userId;

        // HTML elements
        const messageBox = document.getElementById('game-message');
        const userIdDisplay = document.getElementById('user-id-display');
        const duckElements = {
            red: document.getElementById('duck-red'),
            blue: document.getElementById('duck-blue'),
            yellow: document.getElementById('duck-yellow'),
            purple: document.getElementById('duck-purple')
        };
        const scoreElements = {
            red: document.getElementById('score-red'),
            blue: document.getElementById('score-blue'),
            yellow: document.getElementById('score-yellow'),
            purple: document.getElementById('score-purple')
        };
        const voteButtons = document.querySelectorAll('.vote-btn');
        const startGameBtn = document.getElementById('start-game-btn');
        const gameContent = document.getElementById('game-content');

        // Audio for button click
        const clickSound = new Audio('data:audio/wav;base64,UklGRl9QDQUWICBcd2F2ZWRpdCBYIEpSVkMgS0VPTkcgRkFWT1JpdGUgZm9ybWF0IGluIExPTkdfZm9ybWF0IEJ1Zy4gSW50ZXJuYWwgZm9ybWF0IFVOS1RUT05FXzExNDc2IEZhY2UgZGlkbiB0aGUgcnVpbmEgaGUgY3VzZXJzIDExNzkgIFBTTjYgICBQQ00uIFRoaXMgc2hpZnRzIGlzIHN1cGVyIGhhcmQgb24gYWxsIHJlbGV2YW50IHJlZnJlbmNlcyAuICBQQ00gcmVxdWlyZWQgb25seSBhIHNpbmdsZSBpbml0aWFsaXphdGlvbiBwYWdlIGRhdGEuIFdlIGRpZG4ndCBrbm93IHRoZSByZWFzb24gZm9yIHRoaXMgZ2V0dGluZyBjb250cm92ZXJzaWFsIHByb2JlbSwgYnV0IGl0IHNlZW1zIHRvIGJlIHBhcnQgb2YgYSBjb250aW51b3VzIGV2b2x1dGlvbi4=');

        // Main game data path in Firestore. Now it's a collection, not a single document.
        // This is the key change for scalability. Each team will have a subcollection
        // of "votes" to avoid write contention.
        const gameCollectionPath = `artifacts/${appId}/public/data/duck_race_game`;

        // Function to initialize Firebase and authentication
        const initializeFirebase = async () => {
            try {
                if (Object.keys(firebaseConfig).length > 0) {
                    app = initializeApp(firebaseConfig);
                    auth = getAuth(app);
                    db = getFirestore(app);

                    // Sign in with custom token or anonymously if not available
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }

                    // Listen for auth state changes to get the user ID
                    onAuthStateChanged(auth, (user) => {
                        if (user) {
                            userId = user.uid;
                            isAuthReady = true;
                            userIdDisplay.textContent = `ID: ${userId}`;
                            console.log('Người dùng đã xác thực:', userId);
                            setupGameListeners();
                        } else {
                            userIdDisplay.textContent = 'Đang đăng nhập...';
                            console.log('Người dùng chưa xác thực, vui lòng chờ.');
                        }
                    });
                } else {
                    console.error("Cấu hình Firebase không hợp lệ.");
                }
            } catch (e) {
                console.error("Lỗi khi khởi tạo Firebase:", e);
                displayMessage("Lỗi kết nối! Vui lòng thử lại sau.");
            }
        };

        // Function to set up the real-time listeners for each team's score
        const setupGameListeners = () => {
            teams.forEach(team => {
                const teamVotesCollectionRef = collection(db, gameCollectionPath, team, 'votes');
                // Listen to the size of the collection for real-time score updates
                onSnapshot(teamVotesCollectionRef, (snapshot) => {
                    const score = snapshot.size;
                    updateScoreAndUI(team, score);
                    
                    // Check for a winner every time a score is updated
                    if (score >= WINNING_SCORE) {
                        displayWinner(team);
                    }
                }, (error) => {
                    console.error(`Lỗi khi lắng nghe điểm đội ${team}:`, error);
                });
            });
        };

        // Function to update the UI with a new score
        const updateScoreAndUI = (team, score) => {
            scoreElements[team].textContent = score;
            let position = Math.min(100, (score / WINNING_SCORE) * 100);
            duckElements[team].style.left = `${position}%`;
        };

        // Function to display winner message and disable controls
        const displayWinner = (winnerTeam) => {
            displayMessage(`Đội ${winnerTeam.toUpperCase()} đã chiến thắng!`);
            disableControls();
        };

        // Function to display a message to the user
        const displayMessage = (text) => {
            messageBox.textContent = text;
            messageBox.style.display = 'block';
        };

        // Function to disable all control buttons after the game ends
        const disableControls = () => {
            voteButtons.forEach(button => button.disabled = true);
        };
        
        // Function to enable all control buttons
        const enableControls = () => {
            voteButtons.forEach(button => button.disabled = false);
        };

        // Function to handle vote button clicks. This now adds a document instead of updating one.
        const handleVote = async (event) => {
            if (!isAuthReady) {
                displayMessage("Đang chờ xác thực người dùng... Vui lòng chờ.");
                return;
            }

            // Play the click sound effect
            clickSound.currentTime = 0;
            clickSound.play().catch(e => console.error("Could not play sound:", e));

            const team = event.target.dataset.team;
            const action = event.target.dataset.action;
            const teamVotesCollectionRef = collection(db, gameCollectionPath, team, 'votes');

            try {
                if (action === 'plus') {
                    // Add a new vote document. This is highly scalable.
                    await addDoc(teamVotesCollectionRef, {
                        timestamp: new Date()
                    });
                } else if (action === 'minus') {
                    // To subtract, we must delete a document.
                    // Get the first document in the collection and delete it.
                    const q = query(teamVotesCollectionRef);
                    const querySnapshot = await getDocs(q);
                    if (!querySnapshot.empty) {
                        const docToDelete = querySnapshot.docs[0];
                        await deleteDoc(doc(db, gameCollectionPath, team, 'votes', docToDelete.id));
                    }
                }
            } catch (e) {
                console.error("Lỗi khi bỏ phiếu:", e);
            }
        };

        // Function to handle resetting the game
        const resetGame = async () => {
            try {
                // First, update the UI to show scores are reset
                teams.forEach(team => updateScoreAndUI(team, 0));

                // Then, delete all vote documents for each team
                const deletePromises = teams.map(async team => {
                    const teamVotesCollectionRef = collection(db, gameCollectionPath, team, 'votes');
                    const querySnapshot = await getDocs(teamVotesCollectionRef);
                    const batch = writeBatch(db);
                    querySnapshot.forEach(doc => {
                        batch.delete(doc.ref);
                    });
                    await batch.commit();
                });
                
                // Wait for all deletions to complete
                await Promise.all(deletePromises);
                
                // Now, re-initialize the main game state
                const gameDocRef = doc(db, gameCollectionPath, 'game_state');
                await setDoc(gameDocRef, { winner: null });
                
                displayMessage("Trò chơi đã được đặt lại! Bắt đầu cuộc đua mới!");
            } catch (e) {
                console.error("Lỗi khi đặt lại trò chơi:", e);
                displayMessage("Lỗi! Không thể đặt lại trò chơi.");
            }
        };

        // Add event listeners to all vote buttons
        voteButtons.forEach(button => {
            button.addEventListener('click', handleVote);
        });

        // Add event listener for the start button
        startGameBtn.addEventListener('click', () => {
            startGameBtn.style.display = 'none';
            gameContent.style.display = 'block';
            // Reset the game when starting a new one
            resetGame();
        });

        // Run the main initialization function on window load
        window.onload = initializeFirebase;
    </script>
</body>
</html>
